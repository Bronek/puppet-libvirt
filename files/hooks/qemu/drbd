#!/bin/sh

set -e

migration_state_dir="/var/run/libvirt/drbd-migration"

domain="$1"
action="$2"

domxml=$(cat)

drbd_resources () {
    drbd_disks=$(echo ${domxml} | xmlstarlet sel -t -v '/domain/devices/disk/source/@dev' | grep drbd)
    for d in ${drbd_disks} ; do
        echo $(udevadm info --query=property --name=${d} | grep RESOURCE | cut -d "=" -f 2 | cut -d "/" -f 1)
    done
}

drbd_role () {
    role=$1
    for res in $(drbd_resources) ; do
        drbdadm ${role} ${res}
    done
}

drbd_dual_primary () {
    mode=$1
    check=$2
    for res in $(drbd_resources) ; do
        if [ "${check}" = "check-migration" -a -e ${migration_state_dir}/${res} ] ; then
            # This resource is part of a migration, remove the state file
            # and continue. This allows setting dual primary mode exactly once
            # after the state file is created.
            rm -f ${migration_state_dir}/${res}
        else
            drbdadm net-options --protocol=C --allow-two-primaries=${mode} ${res}
            if [ "${mode}" = "no" -a -e ${migration_state_dir}/${res} ] ; then
                # remove migration state file in case it was left over from a
                # previous failed migration attempt
                rm -f ${migration_state_dir}/${res}
            fi
        fi
    done
}

case $action in
    prepare)
        drbd_dual_primary no check-migration
        drbd_role primary
        ;;
    release)
        drbd_role secondary
        drbd_dual_primary no
        ;;
    migrate)
        # create state file indicating that these DRBD resources
        # are part of a migration
        [ -d ${migration_state_dir} ] || mkdir ${migration_state_dir}
        for res in $(drbd_resources) ; do
            touch ${migration_state_dir}/$res
        done
        drbd_dual_primary yes
        echo ${domxml}
        ;;
esac

exit 0
